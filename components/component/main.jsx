'use client'

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/4RW8oshkNHd
 */
import { Button } from "@/components/ui/button"
import { flightRouterStateSchema } from "next/dist/server/app-render/types";
import React, { useState } from 'react';
import { useEffect } from 'react';
import Link from "next/link"





  


export function main() {

     // State to hold the position and visibility of the element
     // eslint-disable-next-line react-hooks/rules-of-hooks
     const [position, setPosition] = useState({ top: 50, left: 50 });
     // eslint-disable-next-line react-hooks/rules-of-hooks
     const [isVisible, setIsVisible] = useState(false);
     // eslint-disable-next-line react-hooks/rules-of-hooks
     const [startTime, setStartTime] = useState(null);
     // eslint-disable-next-line react-hooks/rules-of-hooks
    const [endTime, setEndTime] = useState(null);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [timeDifference, setTimeDifference] = useState(null);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [leaderboardvisible, setLeaderboardVisible] = useState(false);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [leadboardMsg, setLeaderboardMsg] = useState("Show Leaderboard");
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [border, setBorder] = useState("");
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [completed, setCompleted] = useState(false);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [difference, setDifference] = useState(0);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [name, setName] = useState('');
// eslint-disable-next-line react-hooks/rules-of-hooks
    const [leaderboardData, setLeaderboardData] = useState([]);

   // eslint-disable-next-line react-hooks/rules-of-hooks
     useEffect(() => {
      fetch('/api/GetScore', {
        method: 'GET',
        headers: {
          'Cache-Control': 'no-cache', // Tells the browser not to cache this request
        },
      })
      .then(response => response.json())
      .then(data => {
        console.log(data)
        setLeaderboardData(data);
      });

     }, []);
    


     const moveElementRandomly = () => {
      // Assuming a 800x600 px area, adjust as needed
      setIsVisible(false);

     
    
      const timeOut =  Math.floor(Math.random() * 4000)+1000;
      setBorder("border-4 border-black dark:border-gray-80 ");
      setTimeout(() => {
        const newLeft = Math.floor(Math.random() * 90)+5;
        const newTop = Math.floor(Math.random() * 80)+10;
        setIsVisible(true);
        setPosition({ left: newLeft, top: newTop });
        setBorder("");
        const now = new Date().getTime(); // Get current timestamp
        setStartTime(now);
    }, timeOut);
      
      
     
  };

  function endRun() {
    const now = new Date().getTime();
    setEndTime(now);
    setDifference( now - startTime);
    setTimeDifference(difference);
    console.log(difference);
    setCompleted(true);
  }


  function togglevisible() {
    setLeaderboardVisible(!leaderboardvisible);


    if(!leaderboardvisible){
      setLeaderboardMsg("Hide Leaderboard");
    }else{
      setLeaderboardMsg("Show Leaderboard");
    }
      
  }

  function handleNameChange(e) {
    setName(e.target.value);
  }

  function Submit() {
   


    const data = {
      name: name,
      score: difference
    };

    if(name != ""){

    fetch('/api/Setscore', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })
      .then(response => response.json())
      .then(result => {
        console.log("Success:", result)
        fetch('/api/GetScore', {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache', // Tells the browser not to cache this request
          },
        })
      .then(response => response.json())
      .then(data => {
        console.log(data)
        setLeaderboardData(data);
      });
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }
      

    setCompleted(false);
    setIsVisible(false);
  }


  






  return (
    <div className="w-full h-screen relative px-2 py-6 bg-gray-100 dark:bg-gray-800 ">
    
      
        <div className="space-y-2 text-center">
          <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl px-2">Brandstofwolwe</h1>
         
          <p
            className="mx-auto max-w-[600px] text-gray-500 md:text-xl/relaxed dark:text-gray-400 ">
            Click the wolfie as quickly as possible once it appears.
          </p>
        </div>

        <div className={`h-3/6  ${border}`}>
        {isVisible && (
        <div className="relative w-full h-full "  >

          <div className=" inset-0 flex items-center justify-center ">
            <div style={{ position: "absolute", top: `${position.top}%`, left: `${position.left}%`, transform: 'translate(-48px, -48px)' }}>
            <div
              className={`w-24 h-24 rounded-full bg-red-500 border-4 border-red-500 shadow-md absolute`} onClick={endRun} >
              <img
                alt="Shape"
                className="rounded-full"
                width={100}
                src="/brandstofwolfie.PNG"
                style={{
                  aspectRatio: "64/64",
                  objectFit: "cover",
                }}
                 />
            </div>
          </div>
          
        </div>
        
          
        </div>
       )}

        <div className="absolute w-full flex flex-col gap-2 justify-center pb-12 bottom-0">
            <div className="flex flex-col gap-2 min-[400px]:flex-row justify-center pb-3 px-12 bottom-0">
              <Button className="w-full  max-content" variant="outline" onClick={moveElementRandomly}>
                YES 2!
              </Button>
            </div>


            {leaderboardvisible&&(
          <div className="relative px-12">
            <div className="bg-gray-200 p-4 dark:bg-gray-600 w-full ">
              <h2 className="text-xl font-semibold mb-2">Leaderboard</h2>
              <ul className="space-y-2">
                {leaderboardData.map((item, index) => (
                <div className="flex justify-between" key={index}>
                <span className="basis-1/3 text-left">{index+1}. {item.name}</span>
                <span className="basis-1/3 text-center">{item.time}ms</span>
                <span className="basis-1/3 text-right">{item.date.slice(0, 10)}</span>
              </div>
              
              
                ))}
              </ul>
              <Link href="/leaderboard">
              <Button className="mt-4" variant="link">
                View entire leaderboard
              </Button>
              </Link>
            </div>
          </div>
          )}
         
            
            <div className="flex relative px-12 justify-center">
             <Button className="w-1/2  text-xs  max-content" variant="outline" onClick={togglevisible} >
                {leadboardMsg} 
              </Button>
          </div>
          
          
          
       
        </div>
      </div>
      {completed &&(
      <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div className="bg-white p-6 rounded-lg shadow-lg text-gray-500">
          <h2 className="text-xl font-semibold mb-4 ">Your Name</h2>
          <input
            className="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring focus:ring-gray-400"
            placeholder="Your Name"
            type="text"
            onChange={handleNameChange}
          />
          <p className="text-gray-500 text-m mt-2">Your Time: {difference}ms</p>
          <div className="flex justify-end mt-4">
            <Button onClick={Submit}>Submit</Button >
          </div>
        </div>
      </div>)}
    </div>
  );
}


export default main
